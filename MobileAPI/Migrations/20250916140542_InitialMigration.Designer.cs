// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobileAPI.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MobileAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250916140542_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MobileAPI.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<int?>("GpsCoordinateId")
                        .HasColumnType("integer")
                        .HasColumnName("gps_coordinate_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("StreetAddress1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_address1");

                    b.Property<string>("StreetAddress2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street_address2");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("GpsCoordinateId")
                        .HasDatabaseName("ix_address_gps_coordinate_id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_announcements");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_announcements_school_id");

                    b.ToTable("announcements", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.BusinessOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("integer")
                        .HasColumnName("campus_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_business_offices");

                    b.HasIndex("CampusId")
                        .HasDatabaseName("ix_business_offices_campus_id");

                    b.ToTable("business_offices", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.CafeteriaItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CafeteriaMenuId")
                        .HasColumnType("integer")
                        .HasColumnName("cafeteria_menu_id");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("icon_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_cafeteria_item");

                    b.HasIndex("CafeteriaMenuId")
                        .HasDatabaseName("ix_cafeteria_item_cafeteria_menu_id");

                    b.ToTable("cafeteria_item", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.CafeteriaMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_cafeteria_menus");

                    b.ToTable("cafeteria_menus", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.Campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_campuses");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_campuses_address_id");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_campuses_school_id");

                    b.ToTable("campuses", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.GpsCoordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_gps_coordinate");

                    b.ToTable("gps_coordinate", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.HoursOfOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BusinessOfficeId")
                        .HasColumnType("integer")
                        .HasColumnName("business_office_id");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("interval")
                        .HasColumnName("close_time");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("day");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("LibraryId")
                        .HasColumnType("integer")
                        .HasColumnName("library_id");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("interval")
                        .HasColumnName("open_time");

                    b.Property<int?>("RegistrarId")
                        .HasColumnType("integer")
                        .HasColumnName("registrar_id");

                    b.Property<int?>("SecurityId")
                        .HasColumnType("integer")
                        .HasColumnName("security_id");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<int?>("TutoringCenterId")
                        .HasColumnType("integer")
                        .HasColumnName("tutoring_center_id");

                    b.HasKey("Id")
                        .HasName("pk_hours_of_operation");

                    b.HasIndex("BusinessOfficeId")
                        .HasDatabaseName("ix_hours_of_operation_business_office_id");

                    b.HasIndex("LibraryId")
                        .HasDatabaseName("ix_hours_of_operation_library_id");

                    b.HasIndex("RegistrarId")
                        .HasDatabaseName("ix_hours_of_operation_registrar_id");

                    b.HasIndex("SecurityId")
                        .HasDatabaseName("ix_hours_of_operation_security_id");

                    b.HasIndex("TutoringCenterId")
                        .HasDatabaseName("ix_hours_of_operation_tutoring_center_id");

                    b.ToTable("hours_of_operation", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("integer")
                        .HasColumnName("campus_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_librarys");

                    b.HasIndex("CampusId")
                        .HasDatabaseName("ix_librarys_campus_id");

                    b.ToTable("librarys", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.Registrar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("integer")
                        .HasColumnName("campus_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_registrars");

                    b.HasIndex("CampusId")
                        .HasDatabaseName("ix_registrars_campus_id");

                    b.ToTable("registrars", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_schools");

                    b.ToTable("schools", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.SchoolEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("integer")
                        .HasColumnName("campus_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_school_events");

                    b.HasIndex("CampusId")
                        .HasDatabaseName("ix_school_events_campus_id");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_school_events_school_id");

                    b.ToTable("school_events", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.SchoolNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_published");

                    b.Property<string>("Headline")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("headline");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_school_news");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_school_news_school_id");

                    b.ToTable("school_news", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.Security", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("integer")
                        .HasColumnName("campus_id");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_number");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("EmergencyNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emergency_number");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("OfficeLocation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("office_location");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_securitys");

                    b.HasIndex("CampusId")
                        .HasDatabaseName("ix_securitys_campus_id");

                    b.ToTable("securitys", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.SecurityAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AlertDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("alert_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("SecurityId")
                        .HasColumnType("integer")
                        .HasColumnName("security_id");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_security_alerts");

                    b.HasIndex("SecurityId")
                        .HasDatabaseName("ix_security_alerts_security_id");

                    b.ToTable("security_alerts", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.TutoringCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer")
                        .HasColumnName("school_id");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("pk_tutoring_centers");

                    b.HasIndex("SchoolId")
                        .HasDatabaseName("ix_tutoring_centers_school_id");

                    b.ToTable("tutoring_centers", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.UserPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_preferences");

                    b.ToTable("user_preferences", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("Timestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("timestamp");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_profiles");

                    b.ToTable("user_profiles", (string)null);
                });

            modelBuilder.Entity("MobileAPI.Models.Address", b =>
                {
                    b.HasOne("MobileAPI.Models.GpsCoordinate", "GpsCoordinates")
                        .WithMany()
                        .HasForeignKey("GpsCoordinateId")
                        .HasConstraintName("fk_address_gps_coordinate_gps_coordinate_id");

                    b.Navigation("GpsCoordinates");
                });

            modelBuilder.Entity("MobileAPI.Models.Announcement", b =>
                {
                    b.HasOne("MobileAPI.Models.School", "School")
                        .WithMany("SchoolAnnouncements")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_announcements_schools_school_id");

                    b.Navigation("School");
                });

            modelBuilder.Entity("MobileAPI.Models.BusinessOffice", b =>
                {
                    b.HasOne("MobileAPI.Models.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_offices_campuses_campus_id");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("MobileAPI.Models.CafeteriaItem", b =>
                {
                    b.HasOne("MobileAPI.Models.CafeteriaMenu", null)
                        .WithMany("MenuItems")
                        .HasForeignKey("CafeteriaMenuId")
                        .HasConstraintName("fk_cafeteria_item_cafeteria_menus_cafeteria_menu_id");
                });

            modelBuilder.Entity("MobileAPI.Models.Campus", b =>
                {
                    b.HasOne("MobileAPI.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_campuses_address_address_id");

                    b.HasOne("MobileAPI.Models.School", "School")
                        .WithMany("Campuses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_campuses_schools_school_id");

                    b.Navigation("Address");

                    b.Navigation("School");
                });

            modelBuilder.Entity("MobileAPI.Models.HoursOfOperation", b =>
                {
                    b.HasOne("MobileAPI.Models.BusinessOffice", "BusinessOffice")
                        .WithMany("Hours")
                        .HasForeignKey("BusinessOfficeId")
                        .HasConstraintName("fk_hours_of_operation_business_offices_business_office_id");

                    b.HasOne("MobileAPI.Models.Library", "Library")
                        .WithMany("Hours")
                        .HasForeignKey("LibraryId")
                        .HasConstraintName("fk_hours_of_operation_librarys_library_id");

                    b.HasOne("MobileAPI.Models.Registrar", null)
                        .WithMany("Hours")
                        .HasForeignKey("RegistrarId")
                        .HasConstraintName("fk_hours_of_operation_registrars_registrar_id");

                    b.HasOne("MobileAPI.Models.Security", null)
                        .WithMany("Hours")
                        .HasForeignKey("SecurityId")
                        .HasConstraintName("fk_hours_of_operation_securitys_security_id");

                    b.HasOne("MobileAPI.Models.TutoringCenter", null)
                        .WithMany("Hours")
                        .HasForeignKey("TutoringCenterId")
                        .HasConstraintName("fk_hours_of_operation_tutoring_centers_tutoring_center_id");

                    b.Navigation("BusinessOffice");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("MobileAPI.Models.Library", b =>
                {
                    b.HasOne("MobileAPI.Models.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_librarys_campuses_campus_id");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("MobileAPI.Models.Registrar", b =>
                {
                    b.HasOne("MobileAPI.Models.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_registrars_campuses_campus_id");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("MobileAPI.Models.SchoolEvent", b =>
                {
                    b.HasOne("MobileAPI.Models.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_school_events_campuses_campus_id");

                    b.HasOne("MobileAPI.Models.School", null)
                        .WithMany("SchoolEvents")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("fk_school_events_schools_school_id");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("MobileAPI.Models.SchoolNews", b =>
                {
                    b.HasOne("MobileAPI.Models.School", "School")
                        .WithMany("SchoolNews")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_school_news_schools_school_id");

                    b.Navigation("School");
                });

            modelBuilder.Entity("MobileAPI.Models.Security", b =>
                {
                    b.HasOne("MobileAPI.Models.Campus", "Campus")
                        .WithMany()
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_securitys_campuses_campus_id");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("MobileAPI.Models.SecurityAlert", b =>
                {
                    b.HasOne("MobileAPI.Models.Security", "Security")
                        .WithMany("SecurityAlerts")
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_security_alerts_securitys_security_id");

                    b.Navigation("Security");
                });

            modelBuilder.Entity("MobileAPI.Models.TutoringCenter", b =>
                {
                    b.HasOne("MobileAPI.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tutoring_centers_schools_school_id");

                    b.Navigation("School");
                });

            modelBuilder.Entity("MobileAPI.Models.BusinessOffice", b =>
                {
                    b.Navigation("Hours");
                });

            modelBuilder.Entity("MobileAPI.Models.CafeteriaMenu", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("MobileAPI.Models.Library", b =>
                {
                    b.Navigation("Hours");
                });

            modelBuilder.Entity("MobileAPI.Models.Registrar", b =>
                {
                    b.Navigation("Hours");
                });

            modelBuilder.Entity("MobileAPI.Models.School", b =>
                {
                    b.Navigation("Campuses");

                    b.Navigation("SchoolAnnouncements");

                    b.Navigation("SchoolEvents");

                    b.Navigation("SchoolNews");
                });

            modelBuilder.Entity("MobileAPI.Models.Security", b =>
                {
                    b.Navigation("Hours");

                    b.Navigation("SecurityAlerts");
                });

            modelBuilder.Entity("MobileAPI.Models.TutoringCenter", b =>
                {
                    b.Navigation("Hours");
                });
#pragma warning restore 612, 618
        }
    }
}
